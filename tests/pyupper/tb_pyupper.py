"""Creates a version of traceback.rst to insert in the documentation.

This assumes that such a file already exist; this is only done to
ensure we have the right destination. If so, we actually rewrite it.

"""

import os
import sys
import platform
from contextlib import redirect_stderr

LANG = "upper"

# Make it possible to find avantpy and docs source
this_dir = os.path.dirname(__file__)
root_dir = os.path.abspath(os.path.join(this_dir, ".."))
test_dir = os.path.abspath(os.path.join(this_dir, f"py{LANG}"))

sys.path.insert(0, this_dir)
sys.path.insert(0, root_dir)
sys.path.insert(0, test_dir)


# set up import
import avantpy  # noqa

# Require that a version already exists - to confirm we are at the right location
target = os.path.normpath(os.path.join(root_dir, f"docs/source/tracebacks_{LANG}.rst"))


def write(text):
    sys.stderr.write(text + "\n")


content = """Friendly error messages
=======================

AvantPy aims to provide friendlier feedback when an exception
is raised than what is done by Python.
Such feedback will also be available in languages other than English.

.. note::

     The content of this page is generated by running
     {name} located in the ``tests/`` directory.
     This needs to be done explicitly, independently of updating the
     documentation using Sphinx.

AvantPy version: {avantpy};
Python version: {python}

""".format(
    avantpy=avantpy.version.__version__, python=platform.python_version(), name=__file__
)


def make_title(text):
    write("\n" + text)
    write("-" * len(text) + "\n")
    write("Example::\n")


all_imports = {
    "IfNobreakError": "raise_if_nobreak",
    "MismatchedBracketsError": "raise_mismatched_brackets",
    "MissingLeftBracketError": "raise_missing_left_bracket",
    "MissingRepeatColonError": "raise_missing_repeat_colon",
    "MissingRepeatError": "raise_missing_repeat",
    "MissingRepeatError - 2": "raise_missing_repeat2",
    "NameError": "raise_name_error",
    "NobreakFirstError": "raise_nobreak_first",
    "NobreakSyntaxError": "raise_nobreak_syntax",
    "RepeatFirstError": "raise_repeat_first",
    "TryNobreakError": "raise_try_nobreak",
    "UnknownDialectError": "raise_unknown_dialect",
    "UnknownLanguageError": "raise_unknown_language",
}


def create_tracebacks(target, content):
    with open(target, "w", encoding="utf8") as out:
        with redirect_stderr(out):
            write(content)

            for title in all_imports:
                make_title(title)
                __import__(all_imports[title])


try:
    create_tracebacks(target)
except ImportError:
    write("ImportError: please try running this program from it location using")
    write("             python tb_pyupper.py")
